package com.shopeasy.uploads;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Set;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Component;

import com.shopeasy.constants.ProductUploadColumns;
import com.shopeasy.controllers.beans.Category;
import com.shopeasy.controllers.beans.Product;
import com.shopeasy.controllers.beans.SubCategory;

import static com.shopeasy.utils.Utils.close;
import static com.shopeasy.utils.Utils.isEmptyOrNull;

@Component
public class UploadedFileOperation {

	public static void main(String[] args) {
		UploadedFileOperation uploadedFileOperation = new UploadedFileOperation();
		File file = new File("C:/Users/Acer/Desktop/CategoryList.xlsx"); 
		Set<Category> categoriesSet = uploadedFileOperation.proccessUploadedFile(file);
		uploadedFileOperation.showCategories(categoriesSet);
	}
	
	
	public Set<Category> proccessUploadedFile(File file) {
		
		BufferedInputStream bufIn = null;
		Workbook workbook = null;
		Set<Category> categoriesSet = new LinkedHashSet<Category>();
		
		try {
			
			Category category = null;
			SubCategory subCategory = null;
			Product product = null;
			
			bufIn = new BufferedInputStream(
				new FileInputStream(file));
			
			workbook = new XSSFWorkbook(bufIn);
			
			Sheet sheet = workbook.getSheetAt(0);
			
			Iterator<Row> rowIter = sheet.rowIterator();
			
			if(rowIter.hasNext()) {rowIter.next();}
			
			while(rowIter.hasNext()) {
				
				Row currentRow = rowIter.next();
				
				if(!categoriesSet.isEmpty()) {
					
					category = null;
					subCategory = null;
					for(Category categoryVar : categoriesSet) {
						if(categoryVar.getCategoryName().equalsIgnoreCase(currentRow.getCell(ProductUploadColumns.CATEGORY.getColumnNumber()).getStringCellValue())) {
							category = categoryVar;
							break;
						}
					}
					
					if(!isEmptyOrNull(category)) {
						
						for(SubCategory subCategoryTemp : category.getSubCategorySet()) {
							if(subCategoryTemp.getSubCategoryName().equalsIgnoreCase(currentRow.getCell(ProductUploadColumns.SUB_CATEGORY.getColumnNumber()).getStringCellValue())) {
								subCategory = subCategoryTemp;
								break;
							}
						}
						
						if(!isEmptyOrNull(subCategory)) {
							
							product = new Product();
							subCategory.getProductSet().add(product);
							
							product.setSubCategory(subCategory);
							product.setProductName(currentRow.getCell(ProductUploadColumns.PRODUCT_NAME.getColumnNumber()).getStringCellValue());
							product.setPrice(currentRow.getCell(ProductUploadColumns.PRICE.getColumnNumber()).getNumericCellValue());
							product.setMaxUnit(new Double(currentRow.getCell(ProductUploadColumns.MAX_UNIT.getColumnNumber()).getNumericCellValue()).intValue());
							product.setMinUnit(new Double(currentRow.getCell(ProductUploadColumns.MIN_UNIT.getColumnNumber()).getNumericCellValue()).intValue());
							product.setMrp(currentRow.getCell(ProductUploadColumns.MAX_PRICE_LIMIT.getColumnNumber()).getNumericCellValue());
							product.setMeasurementInUnit(currentRow.getCell(ProductUploadColumns.MEASURMENT_UNIT.getColumnNumber()).getStringCellValue());
							product.setHasType(currentRow.getCell(ProductUploadColumns.HAS_TYPE.getColumnNumber()).getBooleanCellValue());
							product.setImage(currentRow.getCell(ProductUploadColumns.IMAGE.getColumnNumber()).getStringCellValue());
							
							
							
						} else {// subCategory is null or empty
							
							subCategory = new SubCategory();
							category.getSubCategorySet().add(subCategory);
							product = new Product();
							
							subCategory.setSubCategoryName(currentRow.getCell(ProductUploadColumns.SUB_CATEGORY.getColumnNumber()).getStringCellValue());
							subCategory.setCategory(category);
							subCategory.getProductSet().add(product);
							
							
							product.setSubCategory(subCategory);
							product.setProductName(currentRow.getCell(ProductUploadColumns.PRODUCT_NAME.getColumnNumber()).getStringCellValue());
							product.setPrice(currentRow.getCell(ProductUploadColumns.PRICE.getColumnNumber()).getNumericCellValue());
							product.setMaxUnit(new Double(currentRow.getCell(ProductUploadColumns.MAX_UNIT.getColumnNumber()).getNumericCellValue()).intValue());
							product.setMinUnit(new Double(currentRow.getCell(ProductUploadColumns.MIN_UNIT.getColumnNumber()).getNumericCellValue()).intValue());
							product.setMrp(currentRow.getCell(ProductUploadColumns.MAX_PRICE_LIMIT.getColumnNumber()).getNumericCellValue());
							product.setMeasurementInUnit(currentRow.getCell(ProductUploadColumns.MEASURMENT_UNIT.getColumnNumber()).getStringCellValue());
							product.setHasType(currentRow.getCell(ProductUploadColumns.HAS_TYPE.getColumnNumber()).getBooleanCellValue());
							product.setImage(currentRow.getCell(ProductUploadColumns.IMAGE.getColumnNumber()).getStringCellValue());
							
							
							category.getSubCategorySet().add(subCategory);
						}
						
					} else {// category is null or empty
						categoriesSet.add(createCategory(currentRow));
					}
				} else { // categoriesSet is null or empty
					categoriesSet.add(createCategory(currentRow));
				}
				
				
			}
			
		} catch (Exception e) {
			
			e.printStackTrace();
		} finally {
			
			try {
				close(bufIn);
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		
		return categoriesSet;
	}
	
	
	public Category createCategory(Row currentRow) {
		
		Category category = new Category();
		category.setCategoryName(currentRow.getCell(0).getStringCellValue());
		SubCategory subCategory = new SubCategory();
		category.getSubCategorySet().add(subCategory);
		Product product = new Product();
		
		subCategory.setSubCategoryName(currentRow.getCell(1).getStringCellValue());
		subCategory.setCategory(category);
		subCategory.getProductSet().add(product);
		
		
		product.setSubCategory(subCategory);
		product.setProductName(currentRow.getCell(ProductUploadColumns.PRODUCT_NAME.getColumnNumber()).getStringCellValue());
		product.setPrice(currentRow.getCell(ProductUploadColumns.PRICE.getColumnNumber()).getNumericCellValue());
		product.setMaxUnit(new Double(currentRow.getCell(ProductUploadColumns.MAX_UNIT.getColumnNumber()).getNumericCellValue()).intValue());
		product.setMinUnit(new Double(currentRow.getCell(ProductUploadColumns.MIN_UNIT.getColumnNumber()).getNumericCellValue()).intValue());
		product.setMrp(currentRow.getCell(ProductUploadColumns.MAX_PRICE_LIMIT.getColumnNumber()).getNumericCellValue());
		product.setMeasurementInUnit(currentRow.getCell(ProductUploadColumns.MEASURMENT_UNIT.getColumnNumber()).getStringCellValue());
		product.setHasType(currentRow.getCell(ProductUploadColumns.HAS_TYPE.getColumnNumber()).getBooleanCellValue());
		product.setImage(currentRow.getCell(ProductUploadColumns.IMAGE.getColumnNumber()).getStringCellValue());
		
		category.getSubCategorySet().add(subCategory);
		return category;
		
	}	
	
	
	public void showCategories(Set<Category> categoriesSet) {
		
		StringBuffer strBuffer = new StringBuffer();
		for(Category category : categoriesSet) {
			for(SubCategory subCategory : category.getSubCategorySet()) {
				for(Product product : subCategory.getProductSet()) {
					strBuffer.append(category.getCategoryName()).append("\t")
					.append(subCategory.getSubCategoryName()).append("\t")
					.append(product.getProductName()).append("\t").append( product.getPrice())
					.append("\t").append(product.getImage()).append("\t")
					.append(product.getMeasurementInUnit()).append("\t")
					.append(product.getMinUnit()).append("\t").append(product.getMaxUnit())
					.append(product.getMrp()).append("\t")
					.append(product.getHasType()).append("\n");
				}
			}
		}
		
		System.out.println(strBuffer.toString());
	}
}
